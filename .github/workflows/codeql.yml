name: CodeQL
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '15 5 * * 3'   # weekly baseline scan
  workflow_call:
    inputs: {}
    secrets: {}

permissions:
  contents: read
  pull-requests: read

jobs:
  format:
    name: Formatting
    uses: ./.github/workflows/format-check.yml

  # --- CodeQL for C# and GitHub Actions ---
  codeql:
    name: CodeQL (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: format
    permissions:
      contents: read
      actions: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ csharp, actions ]
    steps:
      - uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      # queries: security-extended  # optional: stricter rules

      # Build C# so your DLLs exist (good for your optional import check)
      - name: üß∞ Setup .NET 8/9
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: üß∞ Install Invoke-Build
        shell: pwsh
        run: Install-Module InvokeBuild -Force -Scope CurrentUser

      - name: üì¶ Restore solution
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity minimal

      - name: üîß Run C# Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity minimal


      # If autobuild can't infer your build, replace with explicit dotnet steps:
      # - if: matrix.language == 'csharp'
      #   run: |
      #     dotnet restore
      #     dotnet build --configuration Release --no-restore

      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # --- PowerShell via PSScriptAnalyzer -> SARIF upload ---
  powershell-analysis:
    runs-on: ubuntu-latest
    needs: format
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5
      - name: üß™ Show pwsh + repo layout
        shell: pwsh
        run: |
          $PSVersionTable.PSVersion
          Get-ChildItem -Force -Recurse -Depth 2 | Select-Object -First 40 | Format-Table -Auto
          if (-not (Test-Path ./PSScriptAnalyzerSettings.psd1)) {
            Write-Error "Settings file not found at ./PSScriptAnalyzerSettings.psd1"
          }

      - name: üß∞ Setup .NET 8
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: üß∞ Setup .NET 9
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'

      - name: üß∞ Install Invoke-Build
        shell: pwsh
        run: Install-Module InvokeBuild -Force -Scope CurrentUser

      - name: üì¶ Restore solution
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity minimal

      - name: üîß Run C# Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity minimal

      - name: Run PSScriptAnalyzer with settings
        id: pssa
        uses: microsoft/psscriptanalyzer-action@v1.1
        with:
          path: .\src\PowerShell\Kestrun
          recurse: true
          settings: ./PSScriptAnalyzerSettings.psd1
          output: pssa.sarif

      - name: ‚¨ÜÔ∏è Upload PSSA SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pssa.sarif
          category: powershell

      - name: ‚ùó Fail on PSSA errors
        shell: pwsh
        run: |
          $sarif = Get-Content pssa.sarif -Raw | ConvertFrom-Json
          $errors = @($sarif.runs.results | Where-Object { $_.level -eq 'error' })
          if ($errors.Count) { Write-Error "PSScriptAnalyzer found $($errors.Count) error-level issues." }
