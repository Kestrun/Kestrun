name: Publish Release

permissions:
  contents: read   # read release assets & release metadata
  packages: write  # allow publishing to GitHub Packages
  pull-requests: read

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag to promote (e.g., v1.0.0 or v1.0.0-alpha1)"
        required: true
      publish_mode:
        description: "Perform real publish or rehearsal"
        type: choice
        options: [rehearsal, real]
        default: rehearsal
      publish_targets:
        description: "Targets to publish (comma-separated: psgallery, nuget, github)"
        required: true
        default: "psgallery,nuget,github"

jobs:
  release-gate:
    name: GitHub Release (gate)
    uses: ./.github/workflows/github-release.yml

  promote:
    runs-on: ubuntu-latest
    needs: release-gate
    env:
      TAG: ${{ inputs.tag }}
      PUBLISH_MODE: ${{ inputs.publish_mode }}
      TARGETS: ${{ inputs.publish_targets }}
    steps:
      - name: üõéÔ∏è Checkout (for context only)
        uses: actions/checkout@v5

      - name: üì• Download release assets for ${{ inputs.tag }}
        run: |
          mkdir -p ./release-assets
          gh release download "${TAG}" \
            --repo "${GITHUB_REPOSITORY}" \
            --dir ./release-assets \
            --pattern "*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üßæ Show downloaded files
        run: ls -l ./release-assets

      # ---------- PowerShell Gallery ----------
      - name: ‚öôÔ∏è Prepare module for PSGallery (unzip *.psmodule.zip)
        if: contains(env.TARGETS, 'psgallery')
        shell: pwsh
        run: |
          $zip = Get-ChildItem -Path "./release-assets" -Filter "Kestrun-PSModule-*.zip" | Select-Object -First 1
          if (-not $zip) { throw "No Kestrun-PSModule-*.zip found in release assets." }
          New-Item -ItemType Directory -Force -Path ./stage/module | Out-Null
          Expand-Archive -Path $zip.FullName -DestinationPath ./stage/module -Force
          Get-ChildItem -Recurse ./stage/module | Select-Object -First 10 | Format-Table -Auto

      - name: üöÄ Publish to PowerShell Gallery (PSResourceGet)
        if: contains(env.TARGETS, 'psgallery')
        shell: pwsh
        env:
          PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
        run: |
          Import-Module Microsoft.PowerShell.PSResourceGet -Force
          if (-not (Get-PSResourceRepository -Name PSGallery -ErrorAction SilentlyContinue)) {
            Register-PSResourceRepository -PSGallery
          }

          if (-not $env:PSGALLERY_API_KEY) { throw "Missing PSGALLERY_API_KEY" }
          $path = Resolve-Path "./stage/module"
          if ($env:PUBLISH_MODE -eq 'real') {
            Publish-PSResource -Path $path -Repository PSGallery -ApiKey $env:PSGALLERY_API_KEY
          } else {
            Publish-PSResource -Path $path -Repository PSGallery -ApiKey $env:PSGALLERY_API_KEY -WhatIf
          }

      # ---------- NuGet.org ----------
      - name: üöÄ Publish to NuGet.org
        if: contains(env.TARGETS, 'nuget')
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if [ "${PUBLISH_MODE}" = "real" ]; then
            for pkg in ./release-assets/*.nupkg; do
              [ -e "$pkg" ] && dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
            done
            for sym in ./release-assets/*.snupkg; do
              [ -e "$sym" ] && dotnet nuget push "$sym" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
            done
          else
            echo "Rehearsal: Would push nupkg and snupkg to NuGet.org"
          fi

      # ---------- GitHub Packages (NuGet) ----------
      - name: üöÄ Publish to GitHub Packages (NuGet)
        if: contains(env.TARGETS, 'github')
        run: |
          if [ "${PUBLISH_MODE}" = "real" ]; then
            for pkg in ./release-assets/*.nupkg; do
              [ -e "$pkg" ] && dotnet nuget push "$pkg" --source "https://nuget.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/index.json" --api-key "${{ secrets.GITHUB_TOKEN }}" --skip-duplicate
            done
            for sym in ./release-assets/*.snupkg; do
              [ -e "$sym" ] && dotnet nuget push "$sym" --source "https://nuget.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/index.json" --api-key "${{ secrets.GITHUB_TOKEN }}" --skip-duplicate
            done
          else
            echo "Rehearsal: Would push nupkg and snupkg to GitHub Packages"
          fi
