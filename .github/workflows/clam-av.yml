permissions:
  contents: read
name: AV scan (ClamAV)
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/CSharp/kestrun/bin/**'
      - 'src/CSharp/kestrun/obj/**'
      - 'src/PowerShell/kestrun/lib/**'

jobs:
  clamav:
    runs-on: ubuntu-24.04
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v5
       
      - name: 🧰 Install PowerShell
        uses: ./.github/actions/Install-PowerShell
        with:
          Version: 'latest'

      - name: 🧰 Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: 🧰 Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: 🧰 Install Module Invoke-Build
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Install-Module InvokeBuild -Force -Scope CurrentUser

      - name: 🔎 Print runtime context
        shell: pwsh
        run: |
          $PSVersionTable
          dotnet --info
          [System.Runtime.InteropServices.RuntimeInformation]::FrameworkDescription
          [System.Environment]::Version

      - name: 📦 Restore solution
        shell: pwsh
        run: Invoke-Build Restore

      - name: 🔧 Run C# Build (normal)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Invoke-Build Build -Configuration 'Release'

      - name: 🐚 Collect files to scan
        shell: bash
        run: |
          set -euo pipefail
          # Candidate roots that usually contain build outputs
          roots=(
            "src/CSharp/kestrun/bin"
            "src/PowerShell/kestrun/lib"
            "out"
            "artifacts"
          )

          # Build a NUL-separated file list of likely payloads
          : > files.to.scan
          for r in "${roots[@]}"; do
            if [ -d "$r" ]; then
              find "$r" -type f \( \
                   -name '*.dll' -o -name '*.exe' -o -name '*.nupkg' -o \
                   -name '*.zip' -o -name '*.psm1' -o -name '*.ps1' \
                 \) -print0 >> files.to.scan
            fi
          done

          count=$(tr -cd '\0' < files.to.scan | wc -c)
          if [ "$count" -eq 0 ]; then
            echo "❌ No candidate files found to scan. Did the build produce outputs?"
            echo "   Looked under: ${roots[*]}"
            exit 1
          fi
          echo "✅ Will scan $count files:"
          tr '\0' '\n' < files.to.scan | sed 's/^/  • /' | head -n 50
          [ "$count" -le 50 ] || echo "  …and $(($count - 50)) more"

      - name: 🧼 Update ClamAV signatures (stdout, no file locks)
        shell: bash
        run: |
          set -euo pipefail
          sudo systemctl stop clamav-freshclam || true
          sudo sed -i 's/^UpdateLogFile .*/# disabled in CI/' /etc/clamav/freshclam.conf || true
          sudo freshclam --stdout

      - name: 🛡️ Scan collected files
        shell: bash
        run: |
          set -euo pipefail
          # clamscan exit codes: 0=clean, 1=infected, 2=error
          # We want a log either way, so capture output and normalize a summary line.
          xargs -0 -a files.to.scan clamscan --infected --no-summary | tee clamscan.raw.log
          inf=$(grep -c 'FOUND$' clamscan.raw.log || true)
          {
            echo "----------- SCAN SUMMARY -----------"
            echo "Infected files: $inf"
          } | tee clamscan.summary.log
          cat clamscan.summary.log >> clamscan.raw.log
          mv clamscan.raw.log clamscan.log

      - name: ⛔ Fail if infected
        shell: bash
        run: |
          ! grep -q "Infected files: [^0]" clamscan.log

      - name: 📎 Upload scan log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clamscan-log
          path: clamscan.log

