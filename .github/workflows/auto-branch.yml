name: Create linked branch on assignment

on:
  issues:
    types: [assigned]

permissions:
  contents: write       # to create the branch
  issues: write         # to read/write issue metadata (linkage)
  # actions' GITHUB_TOKEN gets these; if your org has restrictions, ensure they're enabled

jobs:
  create-linked-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Build branch name from labels + title
        id: name
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE:  ${{ github.event.issue.title }}
          ISSUE_LABELS: ${{ toJson(github.event.issue.labels) }}
        run: |
          # Decide <type> from labels (feat, fix, refactor, docs, test, chore, techdebt)
          TYPE="chore"
          for l in $(echo "$ISSUE_LABELS" | jq -r '.[].name' | tr '[:upper:]' '[:lower:]'); do
            case "$l" in
              feat|feature)     TYPE="feat" ;;
              fix|bug)          TYPE="fix" ;;
              refactor)         TYPE="refactor" ;;
              docs|documentation) TYPE="docs" ;;
              test|tests)       TYPE="test" ;;
              chore|ci|build|tooling|infra) TYPE="chore" ;;
              techdebt|tech-debt) TYPE="techdebt" ;;
            esac
          done

          # kebab-case the title
          DESC=$(echo "$ISSUE_TITLE" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:] \n-' | tr ' ' '-' | tr -s '-')
          BRANCH="${TYPE}/${ISSUE_NUMBER}-${DESC}"

          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Create linked branch via GraphQL
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
          BRANCH_NAME: ${{ steps.name.outputs.branch }}
        run: |
          # 1) Get repository node ID and base OID from default branch
          read -r REPO_ID DEFAULT_REF OID <<EOF
          $(gh api graphql -f query='
            query($owner:String!, $name:String!){
              repository(owner:$owner, name:$name){
                id
                defaultBranchRef { name target { oid } }
              }
            }' -F owner="${REPO%/*}" -F name="${REPO#*/}" \
            --jq '.data.repository | "\(.id) \(.defaultBranchRef.name) \(.defaultBranchRef.target.oid)"')
          EOF

          # 2) Call createLinkedBranch (this both creates the ref and links it to the issue)
          gh api graphql -f query='
            mutation($input:CreateLinkedBranchInput!) {
              createLinkedBranch(input:$input) {
                issue { number }
                linkedBranch { ref { name } }
              }
            }' -F input="$(jq -n \
              --arg issueId "$ISSUE_NODE_ID" \
              --arg oid "$OID" \
              --arg name "$BRANCH_NAME" \
              --arg repoId "$REPO_ID" \
              '{issueId:$issueId, oid:$oid, name:$name, repositoryId:$repoId}')" 

          echo "Created and linked branch: $BRANCH_NAME (from $DEFAULT_REF@$OID)"

