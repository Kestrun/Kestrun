name: Coverage
permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: coverage-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- C# coverage (one canonical env uploads) ---
  csharp-coverage:
    name: C# coverage (ubuntu-24.04, .NET 8/9)
    runs-on: ubuntu-24.04
    env:
      POWERSHELL_DISTRIBUTION_CHANNEL: GitHub-Actions
      DOTNET_VERBOSITY: minimal
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5 pin

      - name: üß∞ Setup .NET 8 & 9
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9  # v4.3.1 pin
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: üß∞ Install PowerShell
        uses: ./.github/actions/Install-PowerShell
        with:
          Version: latest

      # Non-interactive PSResource install (trust PSGallery)
      - name: üß∞ Install Invoke-Build & Pester (trusted, non-interactive)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Get-Module -ListAvailable -Name Microsoft.PowerShell.PSResourceGet)) {
            Install-Module -Name Microsoft.PowerShell.PSResourceGet -Scope CurrentUser -Force -SkipPublisherCheck -AllowClobber
          }
          Import-Module Microsoft.PowerShell.PSResourceGet -Force
          $repo = Get-PSResourceRepository -Name PSGallery -ErrorAction SilentlyContinue
          if (-not $repo) {
            Register-PSResourceRepository -Name PSGallery -Uri 'https://www.powershellgallery.com/api/v3/index.json' -Trusted
          } elseif (-not $repo.Trusted) {
            Set-PSResourceRepository -Name PSGallery -Trusted
          }
          Install-PSResource -Repository PSGallery -TrustRepository -Scope CurrentUser -Name 'InvokeBuild','Pester'
          Get-Module Pester -ListAvailable | Select Name,Version,Path

      - name: üì¶ Restore
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üîß Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity $Env:DOTNET_VERBOSITY
        
      - name: üß™ Test (.NET) with coverage (Cobertura, Debug)
        shell: pwsh
        run: |
          # If your Coverage task accepts a framework parameter, pass it explicitly:
          # Invoke-Build Coverage -Framework net9.0
          Invoke-Build Coverage 

      - name: üîç Sanity check Cobertura (C#)
        run: |
          test -s coverage/csharp.net9.0.cobertura.xml || (echo "Cobertura is empty"; exit 1)
          grep -Eo '<class name="[^"]+"' coverage/csharp.net9.0.cobertura.xml | head -5 || true

      - name: ‚òÅÔ∏è Upload C# to Coveralls (parallel)
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage/csharp.net9.0.cobertura.xml
          format: cobertura
          parallel: true
          flag-name: csharp
          debug: true


  # --- PowerShell coverage (one canonical env uploads) ---
  pwsh-coverage:
    name: PowerShell coverage (ubuntu-24.04)
    runs-on: ubuntu-24.04
    env:
      POWERSHELL_DISTRIBUTION_CHANNEL: GitHub-Actions
      PESTER_VERBOSITY: Normal
      DOTNET_VERBOSITY: minimal
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v5

      - name: üß∞ Setup .NET 8 & 9
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9  # v4.3.1 pin
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: üß∞ Install PowerShell
        uses: ./.github/actions/Install-PowerShell
        with:
          Version: latest

      # Non-interactive PSResource install (trust PSGallery)
      - name: üß∞ Install Invoke-Build & Pester (trusted, non-interactive)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Get-Module -ListAvailable -Name Microsoft.PowerShell.PSResourceGet)) {
            Install-Module -Name Microsoft.PowerShell.PSResourceGet -Scope CurrentUser -Force -SkipPublisherCheck -AllowClobber
          }
          Import-Module Microsoft.PowerShell.PSResourceGet -Force
          $repo = Get-PSResourceRepository -Name PSGallery -ErrorAction SilentlyContinue
          if (-not $repo) {
            Register-PSResourceRepository -Name PSGallery -Uri 'https://www.powershellgallery.com/api/v3/index.json' -Trusted
          } elseif (-not $repo.Trusted) {
            Set-PSResourceRepository -Name PSGallery -Trusted
          }
          Install-PSResource -Repository PSGallery -TrustRepository -Scope CurrentUser -Name 'InvokeBuild','Pester'
          Get-Module Pester -ListAvailable | Select Name,Version,Path

      - name: üì¶ Restore
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üîß Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üß™ Test (Pester) with coverage (JaCoCo, Pester 5)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $cfg = New-PesterConfiguration
          $cfg.Run.Path = @('tests/PowerShell.Tests')
          $cfg.Run.Exit = $true
          $cfg.Output.Verbosity = $Env:PESTER_VERBOSITY
          $cfg.CodeCoverage.Enabled = $true
          $cfg.CodeCoverage.Path = @('src/PowerShell/Kestrun/*.psm1','src/PowerShell/Kestrun/*.ps1')
          $cfg.CodeCoverage.OutputFormat = 'JaCoCo'
          $cfg.CodeCoverage.OutputPath = './coverage/powershell.jacoco.xml'
          Invoke-Pester -Configuration $cfg 

      - name: ‚òÅÔ∏è Upload PowerShell to Coveralls (parallel)
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: ./coverage/powershell.jacoco.xml
          parallel: true
          flag-name: powershell

  # --- Finalize (must run AFTER all uploads) ---
  coveralls-finish:
    name: Finalize Coveralls
    runs-on: ubuntu-24.04
    needs: [csharp-coverage, pwsh-coverage]
    if: ${{ always() }}
    steps:
      - name: ‚úÖ Tell Coveralls we're done
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
          carryforward: "csharp,powershell"

  codacy-coverage-reporter:
    runs-on: ubuntu-latest
    name: codacy-coverage-reporter
    env:
      POWERSHELL_DISTRIBUTION_CHANNEL: GitHub-Actions
      DOTNET_VERBOSITY: minimal
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5 pin

      - name: üß∞ Setup .NET 8 & 9
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9  # v4.3.1 pin
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: üß∞ Install PowerShell
        uses: ./.github/actions/Install-PowerShell
        with:
          Version: latest

      # Non-interactive PSResource install (trust PSGallery)
      - name: üß∞ Install Invoke-Build & Pester (trusted, non-interactive)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Get-Module -ListAvailable -Name Microsoft.PowerShell.PSResourceGet)) {
            Install-Module -Name Microsoft.PowerShell.PSResourceGet -Scope CurrentUser -Force -SkipPublisherCheck -AllowClobber
          }
          Import-Module Microsoft.PowerShell.PSResourceGet -Force
          $repo = Get-PSResourceRepository -Name PSGallery -ErrorAction SilentlyContinue
          if (-not $repo) {
            Register-PSResourceRepository -Name PSGallery -Uri 'https://www.powershellgallery.com/api/v3/index.json' -Trusted
          } elseif (-not $repo.Trusted) {
            Set-PSResourceRepository -Name PSGallery -Trusted
          }
          Install-PSResource -Repository PSGallery -TrustRepository -Scope CurrentUser -Name 'InvokeBuild','Pester'
          Get-Module Pester -ListAvailable | Select Name,Version,Path

      - name: üì¶ Restore
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üîß Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üß∞ Install Module
        shell: pwsh
        run: Invoke-Build Install-Module
        
      - name: üß™ Test (.NET) with coverage (Cobertura, Debug)
        shell: pwsh
        run: |
          # If your Coverage task accepts a framework parameter, pass it explicitly:
          # Invoke-Build Coverage -Framework net9.0
          Invoke-Build Coverage 

      - name: üîç Sanity check Cobertura (C#)
        run: |
          test -s coverage/csharp.net9.0.cobertura.xml || (echo "Cobertura is empty"; exit 1)
          grep -Eo '<class name="[^"]+"' coverage/csharp.net9.0.cobertura.xml | head -5 || true
    
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage/csharp.net9.0.cobertura.xml
          # or a comma-separated list for multiple reports
          # coverage-reports: <PATH_TO_REPORT>, <PATH_TO_REPORT>

  report-generator:
    runs-on: ubuntu-latest
    name: report-generator-csharp
    env:
      POWERSHELL_DISTRIBUTION_CHANNEL: GitHub-Actions
      DOTNET_VERBOSITY: minimal 
      DEST_REPO: Kestrun/coverage           # <-- change to your coverage repo
      DEST_PATH: report
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5 pin

      - name: üß∞ Setup .NET 8 & 9
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9  # v4.3.1 pin
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: üß∞ Install PowerShell
        uses: ./.github/actions/Install-PowerShell
        with:
          Version: latest

      # Non-interactive PSResource install (trust PSGallery)
      - name: üß∞ Install Invoke-Build & Pester (trusted, non-interactive)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Get-Module -ListAvailable -Name Microsoft.PowerShell.PSResourceGet)) {
            Install-Module -Name Microsoft.PowerShell.PSResourceGet -Scope CurrentUser -Force -SkipPublisherCheck -AllowClobber
          }
          Import-Module Microsoft.PowerShell.PSResourceGet -Force
          $repo = Get-PSResourceRepository -Name PSGallery -ErrorAction SilentlyContinue
          if (-not $repo) {
            Register-PSResourceRepository -Name PSGallery -Uri 'https://www.powershellgallery.com/api/v3/index.json' -Trusted
          } elseif (-not $repo.Trusted) {
            Set-PSResourceRepository -Name PSGallery -Trusted
          }
          Install-PSResource -Repository PSGallery -TrustRepository -Scope CurrentUser -Name 'InvokeBuild','Pester'
          Get-Module Pester -ListAvailable | Select Name,Version,Path

      - name: üì• Checkout coverage site repo (for in-place output + history)
        uses: actions/checkout@v5
        with:
          repository: ${{ env.DEST_REPO }}
          token: ${{ secrets.COVERAGE_REPO_PAT }}
          path: coverage-site
          persist-credentials: true
          fetch-depth: 0

      - name: üì¶ Restore
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üîß Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üß™ Test (.NET) with coverage (Cobertura, Debug)
        shell: pwsh
        env:
          SITE_DIR: ${{ github.workspace }}/coverage-site/${{ env.DEST_PATH }}
          HISTORY_DIR: ${{ github.workspace }}/coverage-site/${{ env.DEST_PATH }}/history
    
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path $env:SITE_DIR,$env:HISTORY_DIR | Out-Null
          # Sync PowerShell DLLs
          Invoke-Build Build

          # Build coverage report
          ./Utility/Build-Coverage.ps1 `
            -Framework "net9.0" `
            -Configuration "Release" `
            -TestProject ".\tests\CSharp.Tests\Kestrun.Tests\KestrunTests.csproj" `
            -CoverageDir ".\coverage" `
            -PesterPath ".\tests\PowerShell.Tests\Kestrun.Tests" `
            -ReportGenerator `
            -ReportDir $env:SITE_DIR `
            -HistoryDir $env:HISTORY_DIR

          # New-Item -ItemType File -Path (Join-Path $env:SITE_DIR '.nojekyll') -Force | Out-Null


      - name: üîÅ Sync report ‚Üí destination/report
        run: |
          set -euo pipefail
          rm -rf "coverage-publish/${{ env.DEST_PATH }}"
          mkdir -p "coverage-publish/${{ env.DEST_PATH }}"
          cp -a coverage/report/. "coverage-publish/${{ env.DEST_PATH }}/"
          Optional (helps GitHub Pages):
          touch "coverage-publish/${{ env.DEST_PATH }}/.nojekyll"

      - name: ‚úÖ Commit & push if changed
        run: |
          set -euo pipefail
          cd coverage-publish
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update coverage report from ${GITHUB_REPOSITORY}@${GITHUB_SHA} on $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
          fi
      - name: üßë‚Äçüíª Live SSH (only if failed and debug enabled)
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          