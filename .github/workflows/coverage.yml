permissions:
  contents: read
name: Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: coverage-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coverage:
    runs-on: ubuntu-24.04
    env:
      POWERSHELL_DISTRIBUTION_CHANNEL: GitHub-Actions
      DOTNET_VERBOSITY: minimal
      PESTER_VERBOSITY: Normal

    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v5

      - name: üß∞ Setup .NET 8 & 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: üß∞ Install PowerShell
        uses: ./.github/actions/Install-PowerShell
        with:
          Version: latest

      - name: üß∞ Install Invoke-Build & Pester
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Set-PSResourceRepository -Name PSGallery -Trusted 
          Install-PSResource -Name 'InvokeBuild','Pester' -Scope CurrentUser
          Get-Module Pester -ListAvailable | Select Name,Version,Path

      - name: üì¶ Restore
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üîß Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity $Env:DOTNET_VERBOSITY

      # --- .NET coverage via built-in XPlat collector (no coverlet.msbuild needed) ---
      - name: üß™ .NET tests net8.0 (XPlat -> Cobertura)
        run: |
          dotnet test tests/CSharp.Tests/Kestrun.Tests/KestrunTests.csproj \
            --no-build \
            -f net8.0 \
            --collect "XPlat Code Coverage" \
            -v $DOTNET_VERBOSITY

      - name: üß™ .NET tests net9.0 (XPlat -> Cobertura)
        run: |
          dotnet test tests/CSharp.Tests/Kestrun.Tests/KestrunTests.csproj \
            --no-build \
            -f net9.0 \
            --collect "XPlat Code Coverage" \
            -v $DOTNET_VERBOSITY

      # --- PowerShell coverage (Pester -> JaCoCo) ---
      - name: üß™ PowerShell tests with coverage
        shell: pwsh
        run: |
            $cfg = New-PesterConfiguration
            $cfg.Run.Path = @('tests/PowerShell.Tests')   # where your tests live
            $cfg.Run.Exit = $true                         # non-zero exit on failures (CI-friendly)
            $cfg.Output.Verbosity = 'Normal'              # or 'Detailed' if you like
            $cfg.CodeCoverage.Enabled = $true
            $cfg.CodeCoverage.Path = @(
              'src/PowerShell/Kestrun/*.psm1',
              'src/PowerShell/Kestrun/*.ps1'
            )
            $cfg.CodeCoverage.OutputFormat = 'JaCoCo'
            $cfg.CodeCoverage.OutputPath   = 'TestResults/pester-coverage.xml'

            Invoke-Pester -Configuration $cfg

      # --- Merge to LCOV ---
      - name: üìä Merge coverage to LCOV
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"**/coverage.cobertura.xml;TestResults/pester-coverage.xml" \
            -targetdir:"coveragereport" \
            -reporttypes:lcov

      # --- Upload to Coveralls ---
      - name: ‚òÅÔ∏è Upload to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coveragereport/lcov.info
          format: lcov

      # Keep the report as an artifact for quick inspection
      - name: üì¶ Upload LCOV artifact
        uses: actions/upload-artifact@v4
        with:
          name: lcov
          path: coveragereport/lcov.info
