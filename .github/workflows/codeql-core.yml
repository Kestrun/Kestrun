name: CodeQL (core)

on:
  workflow_call:
    inputs:
      is_pr:
        description: Whether the workflow runs for a pull request context.
        required: true
        type: boolean

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: codeql-${{ github.repository }}-${{ inputs.is_pr && github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Linting
    uses: Kestrun/Kestrun/.github/workflows/lint-core.yml@main
    with:
      is_pr: ${{ inputs.is_pr }}

  # --- CodeQL for C# and GitHub Actions ---
  codeql:
    name: CodeQL (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      actions: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [csharp, actions]
    steps:
      - uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # queries: security-extended  # optional

      # Build C# so DLLs exist (if applicable)
      - name: ðŸ§° Setup .NET 8/9
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: ðŸ§° Install Invoke-Build
        shell: pwsh
        run: Install-Module InvokeBuild -Force -Scope CurrentUser

      - name: ðŸ“¦ Restore solution
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity minimal

      - name: ðŸ”§ Run C# Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity minimal

      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # --- PowerShell via PSScriptAnalyzer -> SARIF upload ---
  pssa:
    name: PowerShell (PSScriptAnalyzer)
    runs-on: windows-latest
    needs: lint
    permissions:
      contents: read
      security-events: write  # needed to upload SARIF
    steps:
      - uses: actions/checkout@v5

      # Create a sanitized copy so we don't mutate the repo
      - name: Prepare sanitized PowerShell source
        shell: pwsh
        run: |
          $San = Join-Path -Path $PWD -ChildPath "_pwsh_sanitized"
          if (Test-Path $San) { Remove-Item -Recurse -Force $San }
          New-Item -ItemType Directory -Path $San | Out-Null

          # Copy everything (except .git and the sanitized folder itself)
          $excludes = @('.git', '_pwsh_sanitized')
          Get-ChildItem -Path $PWD -Force |
            Where-Object { $_.Name -notin $excludes } |
            ForEach-Object {
              $dest = Join-Path $San $_.Name
              if ($_.PSIsContainer) {
                Copy-Item -Path $_.FullName -Destination $dest -Recurse -Force
              } else {
                Copy-Item -Path $_.FullName -Destination $dest -Force
              }
            }

          # Now strip the KestrunRuntimeApi attributes
          $files = Get-ChildItem -Path (Join-Path $San "src/PowerShell/Kestrun") -Recurse -Include *.ps1,*.psm1,*.psd1
          $attrPatternInline = '\[\s*KestrunRuntimeApi\s*\(\s*''[^'']*''\s*\)\s*\]'
          foreach ($f in $files) {
            $text = Get-Content -LiteralPath $f.FullName -Raw
            $text = $text -replace "^\s*$attrPatternInline\s*\r?\n", ""
            $text = $text -replace "$attrPatternInline\s*,?\s*", ""
            $text = $text -replace "(\r?\n){3,}", "`r`n`r`n"
            Set-Content -LiteralPath $f.FullName -Value $text -NoNewline
          }

          Write-Host "Sanitized tree at: $San"

       # Build C# so DLLs exist (if applicable)
      - name: ðŸ§° Setup .NET 8/9
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: ðŸ§° Install Invoke-Build
        shell: pwsh
        run: Install-Module InvokeBuild -Force -Scope CurrentUser

      - name: ðŸ“¦ Restore solution
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity minimal

      - name: ðŸ”§ Run C# Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity minimal

      - name: ðŸ§° Install Kestrun Module
        shell: pwsh
        run: |
          Invoke-Build Install-Module
          # Initialize the library
          Get-KrFeatureSupport

      # Run PSScriptAnalyzer and produce SARIF
      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@v1.0
        with:
          path: _pwsh_sanitized/src/PowerShell/Kestrun
          recurse: true
          output: pwsh-results.sarif
          settings: ./PSScriptAnalyzerSettings.psd1
          ignorePattern: 'lib'

      # Upload SARIF to GitHub code scanning
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pwsh-results.sarif
