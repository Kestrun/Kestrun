name: CodeQL (core)

on:
    workflow_call:
        inputs:
            is_pr:
                description: Whether the workflow runs for a pull request context.
                required: true
                type: boolean

permissions:
    contents: read
    pull-requests: read

concurrency:
    group: codeql-${{ github.repository }}-${{ inputs.is_pr && github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    lint:
        name: Linting
        uses: ./.github/workflows/lint-core.yml
        with:
            is_pr: ${{ inputs.is_pr }}

    # --- CodeQL for C# and GitHub Actions ---
    codeql:
        name: CodeQL (${{ matrix.language }})
        runs-on: ubuntu-latest
        needs: lint
        permissions:
            contents: read
            actions: read
            security-events: write
        strategy:
            fail-fast: false
            matrix:
                language: [csharp, actions]
        steps:
            - uses: actions/checkout@v5

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v3
              with:
                  languages: ${{ matrix.language }}
            # queries: security-extended  # optional: stricter rules

            # Build C# so your DLLs exist (good for your optional import check)
            - name: üß∞ Setup .NET 8/9
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: |
                      8.0.x
                      9.0.x

            - name: üß∞ Install Invoke-Build
              shell: pwsh
              run: Install-Module InvokeBuild -Force -Scope CurrentUser

            - name: üì¶ Restore solution
              shell: pwsh
              run: Invoke-Build Restore -DotNetVerbosity minimal

            - name: üîß Run C# Build
              shell: pwsh
              run: Invoke-Build Build -DotNetVerbosity minimal

            - name: Analyze
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:${{ matrix.language }}"

    # --- PowerShell via PSScriptAnalyzer -> SARIF upload ---
    powershell-analysis:
        runs-on: ubuntu-latest
        needs: lint
        permissions:
            contents: read
            security-events: write
        steps:
            - uses: actions/checkout@v5
            - name: üß™ Show pwsh + repo layout
              shell: pwsh
              run: |
                  $PSVersionTable.PSVersion
                  Get-ChildItem -Force -Recurse -Depth 2 | Select-Object -First 40 | Format-Table -Auto
                  if (-not (Test-Path ./PSScriptAnalyzerSettings.psd1)) {
                    Write-Error "Settings file not found at ./PSScriptAnalyzerSettings.psd1"
                  }

            - name: üß∞ Setup .NET 8
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: "8.0.x"
                  cache: true
                  cache-dependency-path: |
                      **/*.csproj
                      **/packages.lock.json

            - name: üß∞ Setup .NET 9
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: "9.0.x"

            - name: üß∞ Install Invoke-Build
              shell: pwsh
              run: Install-Module InvokeBuild -Force -Scope CurrentUser

            - name: üì¶ Restore solution
              shell: pwsh
              run: Invoke-Build Restore -DotNetVerbosity minimal

            - name: üîß Run C# Build
              shell: pwsh
              run: Invoke-Build Build -DotNetVerbosity minimal

            - name: üîç Load Kestrun Module
              shell: pwsh
              run: |
                $ErrorActionPreference = 'Stop'
                $dllPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath 'src/PowerShell/Kestrun/Kestrun.psm1'
                if (-not (Test-Path -Path $dllPath)) {
                    Write-Error "DLL not found at expected path: $dllPath"
                }
                Import-Module $dllPath -Force
                Get-Command -Module Kestrun | Select-Object -First 10 | Format-Table -Auto

            - name: üîé Prepare PSSA (pinned & hermetic)
              shell: pwsh
              run: |
                $ErrorActionPreference = 'Stop'
                $modRoot = Join-Path $env:GITHUB_WORKSPACE '.cache/psmodules'
                New-Item -Force -ItemType Directory -Path $modRoot | Out-Null

                # Save locally (no Install-Module touching shared paths), then import exact versions
                $pssaVer = '1.24.0'
                if (-not (Test-Path (Join-Path $modRoot "PSScriptAnalyzer/$pssaVer"))) {
                Save-Module -Name PSScriptAnalyzer -RequiredVersion $pssaVer -Path $modRoot
                }
                $env:PSModulePath = "$modRoot" + [IO.Path]::PathSeparator + $env:PSModulePath
                Import-Module PSScriptAnalyzer -RequiredVersion $pssaVer -Force

            - name: üß™ Run PSScriptAnalyzer ‚Üí JSON (resilient)
              id: pssa
              shell: pwsh
              env:
                PSSA_FAIL_ON_ERROR: 'false'   # set to 'true' if you want CI to fail when the tool crashes
                PSSA_FAIL_ON_ISSUES: 'true'   # set to 'false' to make findings non-fatal
              run: |
                $ErrorActionPreference = 'Stop'
                $root      = $env:GITHUB_WORKSPACE
                $target    = Join-Path $root 'src/PowerShell/Kestrun'
                $settings  = Join-Path $root 'PSScriptAnalyzerSettings.psd1'
                $jsonOut   = Join-Path $root 'psa-results.json'
                $errOut    = Join-Path $root 'psa-errors.json'

                Write-Host "Using PSScriptAnalyzer settings: $settings"

                # try a full-tree sweep first
                $results = $null
                $toolErrors = @()
                try {
                $results = Invoke-ScriptAnalyzer -Path $target -Recurse -Settings $settings -ErrorAction Stop
                } catch {
                Write-Warning "Sweep failed (`Invoke-ScriptAnalyzer` threw): $($_.Exception.Message)"
                # Fallback: analyze file-by-file to isolate any crashy inputs
                $files = Get-ChildItem $target -Recurse -File -Include *.ps1,*.psm1,*.psd1
                $collected = New-Object System.Collections.Generic.List[object]
                foreach ($f in $files) {
                    try {
                    $r = Invoke-ScriptAnalyzer -Path $f.FullName -Settings $settings -ErrorAction Stop
                    if ($r) { [void]$collected.AddRange($r) }
                    } catch {
                    $toolErrors += [pscustomobject]@{ file=$f.FullName; error=$_.Exception.Message }
                    }
                }
                $results = $collected
                }

                # Write outputs
                $results | ConvertTo-Json -Depth 6 | Set-Content -NoNewline $jsonOut
                $toolErrors | ConvertTo-Json -Depth 4 | Set-Content -NoNewline $errOut

                $hasIssues = [bool]($results | Select-Object -First 1)
                $hasToolErrors = [bool]($toolErrors | Select-Object -First 1)

                "has_ps_issues=$hasIssues"     | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
                "has_psa_errors=$hasToolErrors"| Out-File -FilePath $Env:GITHUB_OUTPUT -Append

                # pretty table for logs (won‚Äôt crash build)
                if ($results) {
                $results | Select RuleName,Severity,ScriptName,Line,Message |
                    Format-Table -Auto | Out-String | Write-Host
                }
                if ($hasToolErrors) {
                Write-Warning "PSSA threw on $($toolErrors.Count) file(s). See psa-errors.json."
                }

                # decide the job‚Äôs fate
                if ($env:PSSA_FAIL_ON_ERROR -eq 'true' -and $hasToolErrors) { exit 2 }
                if ($env:PSSA_FAIL_ON_ISSUES -eq 'true' -and $hasIssues)     { exit 1 }

            - name: üìé Upload PSSA artifacts
              uses: actions/upload-artifact@v4
              with:
                name: pssa-artifacts
                path: |
                    psa-results.json
                    psa-errors.json

            - name: ‚ùóFail on PSSA errors
              shell: pwsh
              run: |
                  $sarif = Get-Content pssa.sarif -Raw | ConvertFrom-Json
                  $errors = @($sarif.runs.results | Where-Object { $_.level -eq 'error' })
                  if ($errors.Count) { Write-Error "PSScriptAnalyzer found $($errors.Count) error-level issues." }
