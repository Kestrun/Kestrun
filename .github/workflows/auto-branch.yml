name: Auto-create branch on issue assign

on:
  issues:
    types: [assigned]

permissions:
  contents: write   # create refs
  issues: write     # post a comment
  pull-requests: read

jobs:
  create-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Determine and create branch
        uses: actions/github-script@v7
        with:
          script: |
            const allowed = ['feat','fix','refactor','docs','test','chore','techdebt'];

            // 1) Gather context
            const issue    = context.payload.issue;
            const repo     = context.repo.repo;
            const owner    = context.repo.owner;
            const number   = issue.number;
            const titleRaw = issue.title || '';
            const labels   = (issue.labels || []).map(l => (typeof l === 'string' ? l : l.name)).filter(Boolean);

            // 2) Map labels -> type (preferred), with a few friendly synonyms
            const labelToType = (name) => {
              const n = name.toLowerCase();
              if (allowed.includes(n)) return n;
              if (['feature','enhancement'].includes(n)) return 'feat';
              if (['bug','bugfix','hotfix'].includes(n)) return 'fix';
              if (['documentation','docs-update'].includes(n)) return 'docs';
              if (['tests','testing'].includes(n)) return 'test';
              if (['ci','build','infra','infrastructure','tooling'].includes(n)) return 'chore';
              if (['tech-debt','tech_debt','debt'].includes(n)) return 'techdebt';
              if (['refactoring','cleanup','code-cleaning'].includes(n)) return 'refactor';
              return null;
            };

            let type = null;
            for (const lbl of labels) {
              const t = labelToType(lbl);
              if (t) { type = t; break; }
            }

            // 3) If no label-based type, try parsing the title prefix like "feat:", "[feat]" etc.
            if (!type) {
              const m = titleRaw.toLowerCase().match(/^\s*(?:\[(\w+)\]|(\w+)\s*[:|-])/);
              const candidate = m ? (m[1] || m[2]) : null;
              if (candidate && allowed.includes(candidate)) {
                type = candidate;
              }
            }

            // If still no type, bail gracefully (no spammy branches)
            if (!type) {
              core.info('No recognizable type (feat|fix|refactor|docs|test|chore|techdebt) found in labels or title. Skipping.');
              core.setOutput('skipped', true);
              return;
            }

            // 4) Build the short-kebab-case description from the title (strip common prefixes)
            const cleanTitle = titleRaw
              .replace(/^\s*\[(?:feat|fix|refactor|docs|test|chore|techdebt)\]\s*/i, '')
              .replace(/^\s*(?:feat|fix|refactor|docs|test|chore|techdebt)\s*[:|-]\s*/i, '');

            const slug = cleanTitle
              .toLowerCase()
              .normalize('NFKD').replace(/[\u0300-\u036f]/g, '')
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/^-+|-+$/g, '')
              .slice(0, 60) || `issue-${number}`;

            const branchName = `${type}/${number}-${slug}`;

            // 5) Figure out default branch SHA
            const { data: repoData } = await github.rest.repos.get({ owner, repo });
            const baseBranch = repoData.default_branch;

            const baseRef = await github.rest.git.getRef({
              owner, repo, ref: `heads/${baseBranch}`
            });
            const baseSha = baseRef.data.object.sha;

            // 6) If branch already exists, stop (idempotent)
            try {
              await github.rest.git.getRef({ owner, repo, ref: `heads/${branchName}` });
              core.info(`Branch ${branchName} already exists. Nothing to do.`);
            } catch (e) {
              if (e.status === 404) {
                // 7) Create the branch
                await github.rest.git.createRef({
                  owner, repo,
                  ref: `refs/heads/${branchName}`,
                  sha: baseSha
                });
                core.info(`Created ${branchName} from ${baseBranch} (${baseSha}).`);

                // 8) Comment back on the issue with a pretty link
                const url = `https://github.com/${owner}/${repo}/tree/${encodeURIComponent(branchName)}`;
                await github.rest.issues.createComment({
                  owner, repo, issue_number: number,
                  body: `✨ Branch created: **\`${branchName}\`** → ${url}`
                });
              } else {
                throw e;
              }
            }
