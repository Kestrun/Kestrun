name: CodeQL
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '15 5 * * 3'   # weekly baseline scan

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: codeql-${{ github.repository }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Linting
    uses: Kestrun/Kestrun/.github/workflows/lint-core.yml@main
    with:
      is_pr: ${{ github.event_name == 'pull_request' }}

  # --- CodeQL for C# and GitHub Actions ---
  codeql:
    name: CodeQL (${{ matrix.language }})
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      actions: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ csharp, actions ]
    steps:
      - uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      # queries: security-extended  # optional: stricter rules

      # Build C# so your DLLs exist (good for your optional import check)
      - name: üß∞ Setup .NET 8/9
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: üß∞ Install Invoke-Build
        if: matrix.language == 'csharp'
        shell: pwsh
        run: Install-Module InvokeBuild -Force -Scope CurrentUser

      - name: üì¶ Restore solution
        if: matrix.language == 'csharp'
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity minimal

      - name: üîß Run C# Build
        if: matrix.language == 'csharp'
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity minimal

      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # --- PowerShell via PSScriptAnalyzer -> SARIF upload ---
  powershell-analysis:
    name: PowerShell (PSScriptAnalyzer)
    runs-on: windows-latest
    needs: lint
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: Run PSScriptAnalyzer with settings
        id: pssa
        uses: microsoft/psscriptanalyzer-action@v1.1
        continue-on-error: true  # don‚Äôt fail the job if PSSA crashes before producing SARIF
        with:
          path: .\src\PowerShell\Kestrun
          recurse: true
          settings: ./PSScriptAnalyzerSettings.psd1
          output: pssa.sarif

      - name: ‚¨ÜÔ∏è Upload PSSA SARIF
        if: hashFiles('pssa.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pssa.sarif
          category: powershell

      - name: ‚ùó Fail on PSSA errors
        if: always() && hashFiles('pssa.sarif') != ''  # only if SARIF was created
        shell: pwsh
        run: |
          $sarif = Get-Content pssa.sarif -Raw | ConvertFrom-Json
          $errors = @($sarif.runs.results | Where-Object { $_.level -eq 'error' })
          if ($errors.Count) { Write-Error "PSScriptAnalyzer found $($errors.Count) error-level issues." }
