name: CodeQL (core)

on:
    workflow_call:
        inputs:
            is_pr:
                description: Whether the workflow runs for a pull request context.
                required: true
                type: boolean

permissions:
    contents: read
    pull-requests: read

concurrency:
    group: codeql-${{ github.repository }}-${{ inputs.is_pr && github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    lint:
        name: Linting
        uses: ./.github/workflows/lint-core.yml
        with:
            is_pr: ${{ inputs.is_pr }}

    # --- CodeQL for C# and GitHub Actions ---
    codeql:
        name: CodeQL (${{ matrix.language }})
        runs-on: ubuntu-latest
        needs: lint
        permissions:
            contents: read
            actions: read
            security-events: write
        strategy:
            fail-fast: false
            matrix:
                language: [csharp, actions]
        steps:
            - uses: actions/checkout@v5

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v3
              with:
                  languages: ${{ matrix.language }}
            # queries: security-extended  # optional: stricter rules

            # Build C# so your DLLs exist (good for your optional import check)
            - name: üß∞ Setup .NET 8/9
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: |
                      8.0.x
                      9.0.x

            - name: üß∞ Install Invoke-Build
              shell: pwsh
              run: Install-Module InvokeBuild -Force -Scope CurrentUser

            - name: üì¶ Restore solution
              shell: pwsh
              run: Invoke-Build Restore -DotNetVerbosity minimal

            - name: üîß Run C# Build
              shell: pwsh
              run: Invoke-Build Build -DotNetVerbosity minimal

            - name: Analyze
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:${{ matrix.language }}"

    # --- PowerShell via PSScriptAnalyzer -> SARIF upload ---
    powershell-analysis:
        runs-on: ubuntu-latest
        needs: lint
        permissions:
            contents: read
            security-events: write
        steps:
            - uses: actions/checkout@v5
            - name: üß™ Show pwsh + repo layout
              shell: pwsh
              run: |
                  $PSVersionTable.PSVersion
                  Get-ChildItem -Force -Recurse -Depth 2 | Select-Object -First 40 | Format-Table -Auto
                  if (-not (Test-Path ./PSScriptAnalyzerSettings.psd1)) {
                    Write-Error "Settings file not found at ./PSScriptAnalyzerSettings.psd1"
                  }

            - name: üß∞ Setup .NET 8
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: "8.0.x"
                  cache: true
                  cache-dependency-path: |
                      **/*.csproj
                      **/packages.lock.json

            - name: üß∞ Setup .NET 9
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: "9.0.x"

            - name: üß∞ Install Invoke-Build
              shell: pwsh
              run: Install-Module InvokeBuild -Force -Scope CurrentUser

            - name: üì¶ Restore solution
              shell: pwsh
              run: Invoke-Build Restore -DotNetVerbosity minimal

            - name: üîß Run C# Build
              shell: pwsh
              run: Invoke-Build Build -DotNetVerbosity minimal

            - name: üîé Prepare analyzer modules (pinned, hermetic)
              shell: pwsh
              run: |
                $ErrorActionPreference = 'Stop'
                $modRoot = Join-Path $env:GITHUB_WORKSPACE '.cache/psmodules'
                New-Item -Force -ItemType Directory -Path $modRoot | Out-Null

                function Ensure-Module($Name, $Version) {
                $have = Get-Module -ListAvailable -Name $Name | Where-Object { $_.Version -eq [version]$Version }
                if (-not $have) {
                    # Save into our private cache to avoid scope/path surprises
                    Save-Module -Name $Name -RequiredVersion $Version -Path $modRoot -ErrorAction Stop
                }
                $env:PSModulePath = "$modRoot" + [IO.Path]::PathSeparator + $env:PSModulePath
                Import-Module $Name -RequiredVersion $Version -Force -ErrorAction Stop
                }

                # Pin exact versions
                Ensure-Module -Name PSScriptAnalyzer -Version 1.24.0
                Ensure-Module -Name ConvertToSARIF   -Version 1.0.0

            - name: üß™ Run PSScriptAnalyzer ‚Üí SARIF (deflake)
              id: pssa
              shell: pwsh
              run: |
                $ErrorActionPreference = 'Stop'
                $path      = Join-Path $env:GITHUB_WORKSPACE 'src/PowerShell/Kestrun'
                $settings  = Join-Path $env:GITHUB_WORKSPACE 'PSScriptAnalyzerSettings.psd1'
                $sarifOut  = Join-Path $env:GITHUB_WORKSPACE 'pssa.sarif'

                $htPSA = [ordered]@{
                Path     = $path
                Recurse  = $true
                Settings = $settings
                }

                # 1) Run analyzer
                $results = Invoke-ScriptAnalyzer @htPSA

                # 2) Filter any null-ish diagnostics that can crash the converter
                $safe = $results | Where-Object { $_ -and $_.RuleName -and $_.Severity -and $_.Extent -and $_.Extent.File }
                $skipped = ($results | Measure-Object).Count - ($safe | Measure-Object).Count
                if ($skipped -gt 0) { Write-Warning "Skipping $skipped diagnostics with null fields to avoid ConvertTo-SARIF crash." }

                # 3) Convert to SARIF (module already imported in prior step)
                if ($safe) {
                $safe | ConvertTo-SARIF -FilePath $sarifOut
                } else {
                # create an empty file so upload step doesn't fail
                New-Item -ItemType File -Path $sarifOut -Force | Out-Null
                }

                Write-Host "SARIF written to $sarifOut"

            - name: ‚¨ÜÔ∏è Upload PSSA SARIF
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: pssa.sarif
                category: powershell

            - name: ‚ùóFail on PSSA errors
              shell: pwsh
              run: |
                  $sarif = Get-Content pssa.sarif -Raw | ConvertFrom-Json
                  $errors = @($sarif.runs.results | Where-Object { $_.level -eq 'error' })
                  if ($errors.Count) { Write-Error "PSScriptAnalyzer found $($errors.Count) error-level issues." }
