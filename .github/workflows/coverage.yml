name: Coverage
permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: coverage-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- C# coverage (one canonical env uploads) ---
  csharp-coverage:
    name: C# coverage (ubuntu-24.04, .NET 8/9)
    runs-on: ubuntu-24.04
    env:
      POWERSHELL_DISTRIBUTION_CHANNEL: GitHub-Actions
      DOTNET_VERBOSITY: minimal
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5 pin

      - name: üß∞ Setup .NET 8 & 9
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9  # v4.3.1 pin
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/packages.lock.json

      - name: üß∞ Install PowerShell
        uses: ./.github/actions/Install-PowerShell
        with:
          Version: latest

      # Non-interactive PSResource install (trust PSGallery)
      - name: üß∞ Install Invoke-Build & Pester (trusted, non-interactive)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Get-Module -ListAvailable -Name Microsoft.PowerShell.PSResourceGet)) {
            Install-Module -Name Microsoft.PowerShell.PSResourceGet -Scope CurrentUser -Force -SkipPublisherCheck -AllowClobber
          }
          Import-Module Microsoft.PowerShell.PSResourceGet -Force
          $repo = Get-PSResourceRepository -Name PSGallery -ErrorAction SilentlyContinue
          if (-not $repo) {
            Register-PSResourceRepository -Name PSGallery -Uri 'https://www.powershellgallery.com/api/v3/index.json' -Trusted
          } elseif (-not $repo.Trusted) {
            Set-PSResourceRepository -Name PSGallery -Trusted
          }
          Install-PSResource -Repository PSGallery -TrustRepository -Scope CurrentUser -Name 'InvokeBuild','Pester'
          Get-Module Pester -ListAvailable | Select Name,Version,Path

      - name: üì¶ Restore
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üîß Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üß™ Test (.NET) with coverage (Cobertura)
        run: |
          dotnet test ./src/CSharp/Kestrun.sln \
            -c Release \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=TestResults/coverage.cobertura.xml

      - name: ‚òÅÔ∏è Upload C# to Coveralls (parallel)
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: TestResults/coverage.cobertura.xml
          parallel: true
          flag-name: csharp

  # --- PowerShell coverage (one canonical env uploads) ---
  pwsh-coverage:
    name: PowerShell coverage (ubuntu-24.04)
    runs-on: ubuntu-24.04
    env:
      POWERSHELL_DISTRIBUTION_CHANNEL: GitHub-Actions
      PESTER_VERBOSITY: Normal
      DOTNET_VERBOSITY: minimal
    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v5

      - name: üß∞ Install PowerShell
        uses: ./.github/actions/Install-PowerShell
        with:
          Version: latest

      # Non-interactive PSResource install (trust PSGallery)
      - name: üß∞ Install Invoke-Build & Pester (trusted, non-interactive)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Get-Module -ListAvailable -Name Microsoft.PowerShell.PSResourceGet)) {
            Install-Module -Name Microsoft.PowerShell.PSResourceGet -Scope CurrentUser -Force -SkipPublisherCheck -AllowClobber
          }
          Import-Module Microsoft.PowerShell.PSResourceGet -Force
          $repo = Get-PSResourceRepository -Name PSGallery -ErrorAction SilentlyContinue
          if (-not $repo) {
            Register-PSResourceRepository -Name PSGallery -Uri 'https://www.powershellgallery.com/api/v3/index.json' -Trusted
          } elseif (-not $repo.Trusted) {
            Set-PSResourceRepository -Name PSGallery -Trusted
          }
          Install-PSResource -Repository PSGallery -TrustRepository -Scope CurrentUser -Name 'InvokeBuild','Pester'
          Get-Module Pester -ListAvailable | Select Name,Version,Path

      - name: üì¶ Restore
        shell: pwsh
        run: Invoke-Build Restore -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üîß Build
        shell: pwsh
        run: Invoke-Build Build -DotNetVerbosity $Env:DOTNET_VERBOSITY

      - name: üß™ Test (Pester) with coverage (JaCoCo)
        shell: pwsh
        run: |
          Invoke-Pester -Output Detailed `
            -CodeCoverage ./src/PowerShell/Kestrun/*.psm1 `
            -CodeCoverageOutputFile "TestResults/pester.jacoco.xml" `
            -CodeCoverageOutputFormat JaCoCo

      - name: ‚òÅÔ∏è Upload PowerShell to Coveralls (parallel)
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: TestResults/pester.jacoco.xml
          parallel: true
          flag-name: powershell

  # --- Finalize (must run AFTER all uploads) ---
  coveralls-finish:
    name: Finalize Coveralls
    runs-on: ubuntu-24.04
    needs: [csharp-coverage, pwsh-coverage]
    if: always()
    steps:
      - name: ‚úÖ Tell Coveralls we're done
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
